import com.openhtmltopdf.pdfboxout.PdfRendererBuilder
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import org.jsoup.parser.Parser

buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-single-page-report:4.1.14"
    }
}

plugins {
    id "java"
    id "idea"
    id "net.serenity-bdd.serenity-gradle-plugin" version "4.1.14"
}

group = 'co.dlacademy'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    serenityCoreVersion = '4.1.14'
    junitVersion = '5.10.0'
    assertJVersion = '3.26.0'
}

dependencies {
    // SERENITY
    testImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-junit5:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}"
    // SCREENPLAY
    testImplementation "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
    // JUNIT
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'junit:junit:4.13.2'
    // ASSERT
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    // ADICIONAL
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.21.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.7'
    // PDF
    implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
    implementation 'org.jsoup:jsoup:1.18.1'

}

test {
    systemProperties System.getProperties()
}

serenity {
    reports = ["single-page-html"]
}

test.finalizedBy(aggregate)

gradle.startParameter.continueOnFailure = true

tasks.register('generateReportPdf') {
    doLast {
        def htmlFilePath = 'target/site/serenity/serenity-summary.html'
        def pdfFilePath = 'target/site/serenity/serenity-summary.pdf'

        def htmlFile = new File(htmlFilePath)
        if (!htmlFile.exists()) {
            throw new GradleException("El reporte HTML no existe: $htmlFilePath")
        }

        String cleanedHtml
        try {
            Document doc = Jsoup.parse(htmlFile, "UTF-8", "", Parser.xmlParser())
            cleanedHtml = doc.html()
        } catch (Exception e) {
            throw new GradleException("Error limpiando el archivo HTML: " + e.message, e)
        }

        def pdfFile = new File(pdfFilePath)
        pdfFile.parentFile.mkdirs()

        try {
            PdfRendererBuilder builder = new PdfRendererBuilder()
            builder.withHtmlContent(cleanedHtml, htmlFile.parentFile.toURI().toString())
                    .toStream(new FileOutputStream(pdfFile))
                    .run()
            println "Reporte Serenity en PDF Generado Exitosamente: $pdfFilePath"
        } catch (Exception e) {
            throw new GradleException("Error generando PDF: " + e.message, e)
        }
    }
}
